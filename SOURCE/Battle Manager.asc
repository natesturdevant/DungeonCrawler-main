Entity Combatants[8];//0-3 player, 4-7 enemies

BattleManager battleManager;

static void BattleManager::EndTurn()
{
	// get next entity to take their turn
}

static void BattleManager::EndCombat()
{
	gCombatButtons.Visible = false;
	// Show dropped items list, exp gained, level ups, play winning sfx etc.
}

static void BattleManager::RemoveDeadEntity(int targetSlot)
{
	// Remove entity from the turn order since it was killed.
}

static void BattleManager::SetupTurnOrder()
{	
	int indexes[8];
	bool foundIndexes[8];
	int iterations = 0;
	
	for(int j = 0; j < 8; j++)
	{
		indexes[j] = -1;
		if(!Combatants[j].isInitialized || Combatants[j].stats.health <= 0) continue;
		else iterations++; //count how many alive/active entities there are before we calculate turn order.
	}
	
	int lastIndexFound = 0;
	int highestSpeedIndex = 0;
	
	while(iterations > 0)
	{
		int lastHighestSpeed = 0;
		for(int index = 0; index < 8; index++)
		{
			int speed = Combatants[index].stats.speed;
			String name = Combatants[index].name;
			
			if(!Combatants[index].isInitialized || Combatants[index].stats.health <= 0) continue; // dead or not initialized entity
			else if(foundIndexes[index]) continue; // already found this index, so we ignore it.
			
			else if(speed >= lastHighestSpeed)
			{
				highestSpeedIndex = index;
				lastHighestSpeed = speed;
				
			}
		}
		
		if(!foundIndexes[highestSpeedIndex])
		{
			foundIndexes[highestSpeedIndex] = true;
			indexes[lastIndexFound] = highestSpeedIndex;
			lastIndexFound++;
		}
		
		iterations--;
	}
	
	
	for(int k = 0; k < 8; k++)
	{
		if(indexes[k] >= 0) gTurnOrder.Controls[k].AsButton.Text = Combatants[indexes[k]].name;
	}
	
	// TODO: Use speed stat to determine the turn order.
	// TODO: Add a timer to each Entity
	//battleManager.turnOrder[0] = sDracula;
}

static void BattleManager::StartCombat(int enemyCount)
{
	gCombatButtons.Visible = true;
	//in the future we would count how many heroes player owns or how many are alive
	battleManager.playerCount = 4;
	battleManager.enemyCount = enemyCount;
	
	BattleManager.SetupTurnOrder();
	
	//set enemy type and number

	//establish number of ally combatants

	//establish enemy combatants
}

static void BattleManager::Attack()
{
	Display(String.Format("Attacked entity: %d", Combatants[battleManager.selectedTarget].stats.speed));
	Combatants[battleManager.selectedTarget].stats.speed += 1;
}

static void BattleManager::SelectTarget(int targetSlot)
{
	
}

function game_start()
{
	Combatants[0].Initialize("Hero_1", 1);
	Combatants[1].Initialize("Hero_2", 3);
	Combatants[2].Initialize("Hero_3", 2);
	Combatants[3].Initialize("Hero_4", 5);
	
	Combatants[4].Initialize("Enemy_1", 2);
	Combatants[5].Initialize("Enemy_2", 8);
	Combatants[6].Initialize("Enemy_3", 4);
	Combatants[7].Initialize("Enemy_4", 3);
	
	
	for(int i = 0; i < gTurnOrder.ControlCount; i++)
	{
		gTurnOrder.Controls[i].AsButton.SetPosition(0, i * 30);
	}
	
	
	/*
	sDracula = new Entity;
    sDracula.stats.constitution = 8;
    sDracula.stats.health = 50;
    sDracula.stats.intelligence = 6;
    sDracula.stats.luck = 8;
    sDracula.stats.maxHealth = 50;
    sDracula.stats.maxMana = 12;
    sDracula.stats.mana = 12;
    sDracula.stats.strength = 9;
    sDracula.stats.speed = 7;
	*/
}


