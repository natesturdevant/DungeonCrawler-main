// new module script

PlayerController playerChar;
int currentMapIndex;
DungeonMap map;//Store 100 different randomly generated maps and/or hand drawn maps

void DungeonMap::SetCell(int x, int y, MazeType cell)
{
	if (x < 0 || x >= this.width) return;
	if (y < 0 || y >= this.height) return;
	
    this.mapRow[y] = this.mapRow[y].ReplaceCharAt(x, cell);
	
}

MazeType DungeonMap::GetCell(int x, int y)
{
	if (x < 0 || x >= this.width) return eVoid;
	if (y < 0 || y >= this.height) return eVoid;
	char c = this.mapRow[y].Chars[x];
	if (c == '#') return eMazeWall;
	if (c == ' ') return eMazeFree;
	if (c == 'X') return eMazeTorch;
	if (c == 'P') return eMazePlayer;
	if (c == 'H') return eMazeExit;
	return eMazeWall;
}

void DungeonMap::SetPlayerPosition()
{
	for(int line = 0; line < this.height; line++)
	{
		for(int column = 0; column < this.width; column++)
		{
			if(this.GetCell(line, column) == eMazePlayer)
			{
				SetPlayerStart(line, column, eFaceRight);
				//AbortGame(String.Format("%c", this.mapRow[column].Chars[line]));
				//this.mapRow[line] = this.mapRow[column].ReplaceCharAt(line, 'Z');
				this.SetCell(line, column, eVoid);
			}
		}
	}
	//if(line == "P") SetPlayerStart(currentRow, currentHeight, eFaceRight);
}

static void DungeonMap::loadMap(String fileName)
{
	File *input = File.Open(fileName, eFileRead);
	while (!input.EOF) 
	{
		String line = input.ReadRawLineBack();
		int currentRow = map.currentRow;
		map.mapRow[currentRow] = line;
		if(line.Length > map.width) map.width = line.Length;
		map.height++;
		map.currentRow++;
	}
	
	input.Close();
	
	//maps[currentMapIndex].SetPlayerPosition();
}

function clearScreen() //starts a fresh canvas for drawing the walls on
{
  
  DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();

  if (BackgroundSwapping==0){
    surface.DrawImage(0, 0, 79);
    BackgroundSwapping++;
  }
  
  else{
    surface.DrawImage(0, 0, 80);
    BackgroundSwapping=0;
  }
  
  



  /*
  if (stepCounter%2==0){
    
    surface.DrawImage(0, 0, 79); //flips the background (more or less) to give a better sense of motion
  }
  else if (stepCounter%2==1){
    surface.DrawImage(0, 0, 80);
  }
  if (rotateCounter%2==0){
    
    surface.DrawImage(0, 0, 79); //flips the background (more or less) to give a better sense of motion
  }
  else if (rotateCounter%2==1){
    surface.DrawImage(0, 0, 80);
  }
  */
  //surface.DrawImage(0, 0, 79);
  surface.Release();
  
  

  
  
}

MazeType GetCell(int x, int y)
{
	return map.GetCell(x, y);
}


int wallSprites[15];
int wallSpritesTorch[15];

//Point* GetPos1 = new Point;
//GetPos1.x = playerChar.x;
//GetPos1.y = playerChar.y;

int[] rOffset(int x, int y, Direction dir) {
  int r[] = new int[2];
  if (dir == eFaceUp) { r[0] = x; r[1] = y; }  
  if (dir == eFaceDown) { r[0] = -x; r[1] = -y; }  
  if (dir == eFaceLeft) { r[0] = y; r[1] = -x; }  
  if (dir == eFaceRight) { r[0] = -y; r[1] = x; }  
  return r;
}

function ClearMiniMap()
{
	gMiniMapLabel.Text = "";
}
bool visible[200];

function DrawMiniMap()
{
	ClearMiniMap();
	gMiniMapLabel.Text = gMiniMapLabel.Text.Append(String.Format("x: %d y: %d dir: %d[", playerChar.x, playerChar.y, playerChar.faceDir));
	for(int y = -10; y <= 12; y++)
	{
		gMiniMapLabel.Text = gMiniMapLabel.Text.Append("[");
		for(int x = -10; x <= 12; x++)
		{
			int ro[];
			MazeType mt;
			ro = rOffset(x, y, playerChar.faceDir);
			mt = GetCell(playerChar.x + ro[0], playerChar.y + ro[1]);
			
			String typeString = "";
			if(mt == eMazeWall) typeString = "#";
			if(mt == eMazeFree) typeString = " ";
			if(mt == eMazeTorch) typeString ="X";
			if(mt == eVoid) typeString = "O";
			if(mt == eMazeExit) typeString = "E";
			
			// Draw player last
			if(x == 0 && y == 0) typeString = "P";
			
			gMiniMapLabel.Text = gMiniMapLabel.Text.Append(typeString);
		}
	}
}


function renderVisionCone() //draws the walls
{
  clearScreen();
  
  
  DrawingSurface * dungeonWalls = Room.GetDrawingSurfaceForBackground();

  // iterate over cone
  for (YYYy = -2; YYYy <= 0; YYYy++) {
    for (int x = -2; x <= 0; x++) {
      // rotate offset to find correct cell
      int ro[];
      MazeType mt;
      int sprite2;
      ro = rOffset(x, YYYy, playerChar.faceDir);
      mt = GetCell(playerChar.x + ro[0], playerChar.y + ro[1]);
	  
	  visible[(YYYy + 2) * 5 + (x + 2)] = true;
      if (mt == eMazeWall) {
        sprite2 = wallSprites[(YYYy + 2) * 5 + (x + 2)];
        if (sprite2 > 0) dungeonWalls.DrawImage(0, 0, sprite2);
      }
      if (mt == eMazeTorch) {
        sprite2 = wallSpritesTorch[(YYYy + 2) * 5 + (x + 2)];
        if (sprite2 > 0) dungeonWalls.DrawImage(0, 0, sprite2);
      }
      if (x < 0) {
        ro = rOffset(-x, YYYy, playerChar.faceDir);
        mt = GetCell(playerChar.x + ro[0], playerChar.y + ro[1]);
        if (mt == eMazeWall) {
          sprite2 = wallSprites[(YYYy + 2) * 5 + (-x + 2)];
          if (sprite2 > 0) dungeonWalls.DrawImage(0, 0, sprite2);
        }
        if (mt == eMazeTorch){
          sprite2 = wallSpritesTorch[(YYYy + 2) * 5 + (-x + 2)];
          if (sprite2 > 0) dungeonWalls.DrawImage(0, 0, sprite2);
        }
      }
    }
  }
  
  DrawMiniMap();
}


void PlayerController::UpdateRotation()
{
	playerChar.rotation_x = 0;
	playerChar.rotation_y = 0;
	if(this.faceDir == eFaceDown) playerChar.rotation_y = 1;
	if(this.faceDir == eFaceUp) playerChar.rotation_y = -1;
	if(this.faceDir == eFaceLeft) playerChar.rotation_x = -1;
	if(this.faceDir == eFaceRight) playerChar.rotation_x = 1;
}




bool GetPos(int x, int y)
{
  return (playerChar.x == x && playerChar.y == y);
}

Timer* timeForButton;

int stepsTaken = 100000;
function eventCoordinator()
{
     gLittleMap.Visible=false;
     gLittleGun.Visible=false;
  if ((GetPos(14, 14))&&(playerChar.faceDir==eFaceLeft)&&(playerHasMap==false)){
    gLittleMap.Visible=true;
  }

  if (GetPos(13, 14)){

    if (Game.DoOnceOnly("Find map")){
      player.Say("Now I can press 'M' for my magical map!");
      Wait(10);
      player.Say("I should have enchanted it better.");
      player.Say("It kinda sucks.");
      player.Say("Probably why I threw it down in this corner to begin with.");
      player.Say("Oh, yeah, I can also press 'T' if I get so lost I need to start over.");
      player.Say("But I don't think I'm that dumb!");
      playerHasMap=true;
    }
  }
  
    if ((GetPos(14, 14))&&(playerHasMap==true)){
      if (Game.DoOnceOnly("GhostAfterMap")){
        gGhostie.Visible=true;
        cGhost.SayAt(gGhostie.X, gGhostie.Y-20, 100, "You pompous coward! I'm three steps ahead of you!");
        gGhostie.Visible=false;
        player.Say("I hate that ghost! Now I need my Ghost Blasting Gun.");
        player.Say("I know it's down here somewhere...");
      }
    }
   
  
  if (stepCounter==15){
   // player.Say("I better find my magical map or I'm going to get lost forever down here.");
    //Wait(15);
    //player.Say("Then I'll never kill that ghost.");
  }
  
  if ((GetPos(5, 37))&&(playerChar.faceDir==eFaceDown)){
    if (cGun.Transparency==100){
    gLittleGun.Visible=true;
    }
  }
  
  if (GetPos(5, 38)){
    if (Game.DoOnceOnly("Got the gun")){
      cGun.Transparency=0;
      player.Say("That ghost is toast!");
      player.Say("I can press 'SPACE' to smoke that dude.");
      stepsTaken=stepCounter;
    }
  }
  
  if (stepCounter==stepsTaken+35){
    gGhostie.Visible=true;
    cGhost.Say("Hey, Dracula! Screw you!");
  }
}


void PlayerController::Move(int distance)
{
  /*
  if (gMap.Visible==true){
    return;
  }
  */
  

  int x = this.x + distance * playerChar.rotation_x;
	int y = this.y + distance * playerChar.rotation_y;
	//if((y < 0 || y > 9) || x < 0 || x > 11) return;  //can't move off the map as defined above
	
  MazeType tile = GetCell(x, y);
	if(tile != eMazeFree && tile && tile != eMazeExit) return;
    stepCounter++;
	//Move the player
	this.x += distance * playerChar.rotation_x;
  /*
    if (cGun.y==410){
      cGun.Move(cGun.x, 420, eNoBlock, eAnywhere);
    }
    else{
      cGun.Move(cGun.x, 410, eNoBlock, eAnywhere);
    }
    */
	this.y += distance * playerChar.rotation_y;

  renderVisionCone();
  
  eventCoordinator();
  
  if(tile == eMazeExit)
  {
	//Found exit

  }
  
  
}

void PlayerController::Rotate(int direction)
{
  /*
  if (gMap.Visible==true){
    return;
  }
  */
      // swapWallSprites();
  rotateCounter++;
	this.faceDir += direction;
	if(this.faceDir > 3) this.faceDir = eFaceUp;
	else if(this.faceDir < 0) this.faceDir = eFaceLeft;
	this.UpdateRotation();

  renderVisionCone();

     eventCoordinator();
 
  
}

function swapWallSprites()
{
  
  
  if ((stepCounter%2==0)||(rotateCounter%2==0)){
    wallSprites[13]=79;
  }
  else if ((stepCounter%2==1)||(rotateCounter%2==1)){
    wallSprites[13]=80;
  }
  /*
  if (wallSprites[13]==79){
    wallSprites[13]=80;
  
  }
  if (wallSprites[13]==80){
    wallSprites[13]=79;
  }
  */
  
  
}


function SetPlayerStart(int x, int y, PlayerFaceDirection faceDir)
{
	playerChar.x = x;
	playerChar.y = y;
	playerChar.faceDir = faceDir;
	playerChar.UpdateRotation();
  //renderVisionCone(); no room loaded yet lol
}


int mapSize;


function repeatedly_execute()
{
  if (timeForButton!=null){
    btnTimer.Height=timeForButton.RemainingTicks;
  }
  
  if (Timer.IsExpired(timeForButton)) // you may pass even null-pointer there
{
    btnTimer.Visible=false;
    //btnTimer.Height=timeForButton.RemainingTicks;
}
  
  
}

function on_key_press(eKeyCode keycode, int mod)
{
    if(keycode==eKeyA){
    playerChar.Rotate(-1);
  }
  
  else if (keycode==eKeyD){
    playerChar.Rotate(1);
  }
  
  else if (keycode==eKeyW){
    playerChar.Move(1);
    
  }
  
  else if (keycode==eKeyS){
    playerChar.Move(-1);
  }
  
  else if (keycode==eKeyP){
    
    MazeType dumbtest = GetCell(2, 2);
    if (dumbtest==eMazeFree){
      Display("Not wall!");
    }
    else if (dumbtest==eMazeWall){
      Display("Wall!");
    }
  
  }
  
  else if (keycode==eKeyM){
    if (gMiniMap.Visible==true){
      gMap.Visible=false;
      gMiniMap.Visible=false;
    }
    else{
      gMiniMap.Visible=true;
      gMap.Visible=true;
    }
  }
  
  else if (keycode==eKeyT){
    playerChar.Rotate(-1);  //town portal
    Wait(5);
    playerChar.Rotate(-1);
    Wait(5);
    playerChar.Rotate(-1);
    Wait(5);
    playerChar.x=3;
    playerChar.y=3;
    playerChar.Move(1);
    renderVisionCone();
    DrawMiniMap();
    
  }
  
  else if (keycode==eKeySpace){
    if (cGun.Animating){
      return;
    }
    
    else{
    cGun.Animate(0, 2, eOnce, eBlock);
    cGun.UnlockView();
    }
    
    if (gGhostie.Visible==true){
      gGhostie.BackgroundGraphic=84;
      Wait(10);
      gGhostie.BackgroundGraphic=83;
      Wait(10);
      gGhostie.BackgroundGraphic=84;
      Wait(10);
      gGhostie.BackgroundGraphic=83;
      Wait(10);
      cGhost.SayAt(gGhostie.X, gGhostie.Y-20, 100, "Oh no! Now I'm going to ghost hell!");
      cGhost.SayAt(gGhostie.X, gGhostie.Y-20, 100, "You suck, Dracula!!");
      int trans = gGhostie.Transparency;
        while (trans < 100) {
          trans++;
          gGhostie.Transparency = trans;
          Wait(1);
        }

       gGhostie.Visible=false;
      player.Say("Got 'im!");
      player.Say("Ha ha ha!");
      player.Say("Ah, that's satisfying.");
      aGardenTheme.Play();
      player.Say("Now I can go back to my dinner guests.");
      Display("Thanks for playing!!");
      Display("You took %d steps!", stepCounter);
      if (!playerHasMap){
        Display("And you beat it without a map, you maniac!");
      }
      FadeOut(10);
      QuitGame(1);
    }
  }
  
  else if (keycode==eKey0){
    playerChar.x=5;
    playerChar.y=37;
  }
  
  else if (keycode==eKey2){
    if (GetBackgroundFrame()==0){
    SetBackgroundFrame(1);
  }
  else if (GetBackgroundFrame()==1){
    SetBackgroundFrame(0);
  }
  }

}

Point * DungeonMap::GetExitPosition()
{
	Point * exit = new Point;
	exit.x = -1;
	exit.y = -1;
	
	for(int line = 0; line < this.height; line++)
	{
		for(int column = 0; column < this.width; column++)
		{
			if(this.GetCell(column, line) == eMazeExit)
			{
				exit.x = line;
				exit.y = column;
			}
		}
	}
	
	return exit;
}

static void DungeonMap::GenerateAndAttachDungeon(int dimensions)
{
	MazeGenerator._CreateMaze(dimensions, "$APPDATADIR$/auto-generated-maze.txt");
	Point *exitPosition = map.GetExitPosition();
	
	// If new dungeon is wider then the previous, just make sure the door is placed at a right place
	// Otherwise you'd have to offset the whole dungeon OR offset it from the very beginning.
	// Create Entrance to the dungeon by cutting off 2 floor tiles into the generated dungeon
	// Create Exit at the other side of the dungeon in a random spot Random(width - 1) + 1
	// repeat when creating new dungeon...
	
	// Exit is always at the South(for now) which makes the entrance always at the North.
	// (Entrace is old Exit once dungeons are merged)
	
	
	// Create entrance to the generated maze
	
	int dungeonRealDimensions = dimensions * 2 + 1;
	char exitTile = 'H';
	char floorTile = ' ';
	
	
	File *input = File.Open("$APPDATADIR$/auto-generated-maze.txt", eFileRead);
	
	int count = 0;
	String lineTest = "";
	String ExitPos = "";
	if (input != null) 
	{
		while (!input.EOF) 
		{
			String line = input.ReadRawLineBack();
			
			// First 2 rows, add an entrance
			if(count < 2)
			{
				line = line.ReplaceCharAt(exitPosition.y, floorTile);
				ExitPos = ExitPos.Append(String.Format("%d,", exitPosition.y));
			}
			lineTest = lineTest.Append(line);
			lineTest = lineTest.Append(String.Format("["));
			
			int currentRow = map.currentRow;
			map.mapRow[currentRow] = line;
			if(line.Length > map.width) map.width = line.Length;
			map.height++;
			map.currentRow++;
			
			count++;	
		}
		// get random exit position
		// TODO: Probably should be created after generating next dungeon in case it's smaller...
		
		int randomExit = Random(dungeonRealDimensions - 2) + 1;
		// Create random Exit at the last 2 rows
		map.mapRow[map.currentRow - 2] = map.mapRow[map.currentRow - 2].ReplaceCharAt(5, floorTile);
		map.mapRow[map.currentRow - 1] = map.mapRow[map.currentRow - 1].ReplaceCharAt(5, exitTile);
		
		input.Close();
	}
	
	gTestLabel.Text = gTestLabel.Text.Append(String.Format("%s[x:%d,%d[[",lineTest, exitPosition.x, exitPosition.y));
	

	
}

function game_start() 
{
  mouse.Visible=false;
  cGun.Transparency=100;
	DungeonMap.loadMap("map-1.txt");
	//DungeonMap.GenerateAndAttachDungeon(10);
	DungeonMap.loadMap("map-2.txt");
	DungeonMap.GenerateAndAttachDungeon(10);
  DungeonMap.loadMap("map-3.txt");
  //DungeonMap.GenerateAndAttachDungeon(10);
  //DungeonMap.GenerateAndAttachDungeon(10);
  //DungeonMap.GenerateAndAttachDungeon(10);
  //DungeonMap.GenerateAndAttachDungeon(10);
  //DungeonMap.GenerateAndAttachDungeon(10);
  //DungeonMap.GenerateAndAttachDungeon(10);
    //aDungeonTheme.Play();

    

  
	
	
  /* wall sprites, 3 rows and 5 columns (eFaceUp)
      14 10  3  9 13
       0  8  2  7  0
       0  6  X  5  0
  */
 /* wall sprites, 3 rows and 5 columns (eFaceUp)
      14 10  9  3 13   0  1  2  3  4
       0  8  2  7  0   5  6  7  8  9  
       0  6  X  5  0   10 11 X 13 14
  */
  //wallSprites[0] = 14; wallSprites[1] = 10; wallSprites[2] = 3; wallSprites[3] = 9; wallSprites[4] = 15; 
  //wallSprites[6] = 8; wallSprites[7] = 2; wallSprites[8] = 7; wallSprites[11] = 6; wallSprites[13] = 5;
  
  //having a step counter here to swap out the array every other step may help
  //the player to have a better sense of motion
  
  wallSprites[0] = 70; wallSprites[1] = 64; wallSprites[2] = 57; wallSprites[3] = 63; wallSprites[4] = 69; 
  wallSprites[5] = 68; wallSprites[6] = 62; wallSprites[7] = 56; wallSprites[8] = 61; wallSprites[9]=67; wallSprites[11] = 60; wallSprites[13] = 59;
  /*
  wallSpritesTorch[0] = 14; wallSpritesTorch[1] = 28; wallSpritesTorch[2] = 29; wallSpritesTorch[3] = 38;
  wallSpritesTorch[4] = 13; wallSpritesTorch[6] = 32; wallSpritesTorch[7] = 33; wallSpritesTorch[8] = 36;
  wallSpritesTorch[11] = 34; wallSpritesTorch[13] = 35;
  */
  wallSpritesTorch[0] = 147; wallSpritesTorch[1] = 143; wallSpritesTorch[2] = 137; wallSpritesTorch[3] = 142;
  wallSpritesTorch[4] = 146; wallSpritesTorch[5] = 145; wallSpritesTorch[6] = 141; wallSpritesTorch[7] = 136; wallSpritesTorch[8] = 140; wallSpritesTorch[9]=144;
  wallSpritesTorch[11] = 138; wallSpritesTorch[13] = 139;
  
  SetPlayerStart(3, 3, eFaceRight);
}

